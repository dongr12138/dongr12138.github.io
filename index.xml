<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maybe...</title>
    <link>https://dongr12138.github.io/</link>
    <description>Recent content on Maybe...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Oct 2019 12:04:22 +0800</lastBuildDate>
    
	<atom:link href="https://dongr12138.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1019-Spring常用注解</title>
      <link>https://dongr12138.github.io/post/1019/</link>
      <pubDate>Sat, 19 Oct 2019 12:04:22 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1019/</guid>
      <description>1.注解列表 @SpringBootApplication：
包含了@ ComponentScan，@ Configuration和@EnableAutoConfiguration注解。其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序清单中。
@Configuration等于于spring的XML配置文件；使用Java代码可以检查类型安全。
@EnableAutoConfiguration自动配置。
@ComponentScan组件扫描，可自动发现和装配一些Bean。
@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。
@RestController注解是@Controller和@ResponseBody的合集，表示这是一个控制器bean，并且是将函数的返回值直接填充到HTTP响应体中，是REST风格的控制器。
@Autowired自动导入。
@PathVariable获取参数。
@JsonBackReference解决嵌套外链问题。
@RepositoryRestResourcepublic配合spring-boot-starter-data-rest使用。
2.注解详解 @SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等效于：@Configuration，@ EnableAutoConfiguration和@ComponentScan三个配置。
package com.example.myproject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } }  @ResponseBody：表示该方法的返回结果直接写入HTTP响应正文，一般在异步获取数据时使用，用于生成RESTful的api。在使用@RequestMapping后，返回值通常解析为替换路径，加上@ responsebody后返回结果不会被解析为转换路径，而是直接写入HTTP响应正文。。垂直获取json数据，加上@responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。示例代码：
@RequestMapping(“/test”) @ResponseBody public String test(){ return”ok”; }  @Controller：用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（服务层），一般这个注解在类中，通常方法需要配合注解@RequestMapping 。示例代码：
@Controller @RequestMapping(“/demoInfo”) publicclass DemoController { @Autowired private DemoInfoService demoInfoService; @RequestMapping(&amp;quot;/hello&amp;quot;) public String hello(Map&amp;lt;String,Object&amp;gt; map){ System.</description>
    </item>
    
    <item>
      <title>1018-Springboot的配置</title>
      <link>https://dongr12138.github.io/post/10-18/</link>
      <pubDate>Fri, 18 Oct 2019 22:14:27 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/10-18/</guid>
      <description>1018-Springboot的配置 两个配置文件，都是用来修改配置的 1.application.properties server.port = 8081 # //SpringBoot配置文件  2.application.yml server: port: 8081 # //SpringBoot配置文件（新型） person: lastName: hello age: 19 boss: false birth: 2019/10/18 maps: {k1: v1,k2: 12} lists: - list - zhaoliu dog: name: 小狗 age: 2 # YAML语法： # 1.基本语法 # x:(空格)y: 表示一对键值对（空格必须有）; # 以【空格】的缩进来控制层级关系；只是是左对齐的一列数据，都是同一层次的 # # server: # port: 8081 # path: /hello (注意有空格) # # 属性和值也是大小写敏感； # # 2.值的写法 # 字面量：普通的值（数字，字符串，布尔） # k: v:字面直接来写； # 字符串默认不用加上单引用或者双引导； # # &amp;quot;&amp;quot;:双引号；不会转义字符串的特殊字符；特殊字符合作为本身想表示的意思 # name： &amp;quot;zhangsan \n lisi&amp;quot; : 输出 ; zhangsan 换行 lisi # # &#39;&#39;:单引号；会转义特殊字符，特殊字符最终只是一个普通的字符数据 # name: &#39;zhangsan \n lisi&#39; : 输出 ; zhangsan \n lisi # # 对象、Map（属性和值）（键值对） # k: v: # 对象还是k: v的方式 # friends: # lastName: zhangsan # age: 20 # # 行内写法: # friend: {lastName: zhangsan,age: 18} # # 数组（List、Set）: # 用-值表示数组中的一个元素 # pets: # -cat # -dog # -pig # # 行内写法 # pets: [cat,dog,pig]  Person.</description>
    </item>
    
    <item>
      <title>1017-Springboot的Hello World</title>
      <link>https://dongr12138.github.io/post/1017/</link>
      <pubDate>Thu, 17 Oct 2019 16:40:21 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1017/</guid>
      <description>pom.xml &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;groupId&amp;gt;com.Spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;Springboot-1015&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; //导入到web依赖 &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.57&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;/project&amp;gt;  HelloWorldApplication.java package main; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; /** * rui 2019/10/15 - 23:15 */ @SpringBootApplication //Springboot主配置类 public class HelloWorldApplication { public static void main(String[] args) throws Exception{ SpringApplication.</description>
    </item>
    
    <item>
      <title>2019.10.17</title>
      <link>https://dongr12138.github.io/post/blog/</link>
      <pubDate>Thu, 17 Oct 2019 11:44:43 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/blog/</guid>
      <description>Hello 我是一个经不起批评的人，如果你批评我，我就骂你。</description>
    </item>
    
  </channel>
</rss>