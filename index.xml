<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maybe...</title>
    <link>https://dongr12138.github.io/</link>
    <description>Recent content on Maybe...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Nov 2019 22:12:24 +0800</lastBuildDate>
    
	<atom:link href="https://dongr12138.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1102-晴</title>
      <link>https://dongr12138.github.io/post/1102/</link>
      <pubDate>Sat, 02 Nov 2019 22:12:24 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1102/</guid>
      <description>你守护世界，我守护你。 &amp;ndash;《少年的你》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1101-晴</title>
      <link>https://dongr12138.github.io/post/1101/</link>
      <pubDate>Fri, 01 Nov 2019 23:14:09 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1101/</guid>
      <description>有些人你见过之后回想起来只剩一种感觉，而不是模样。 &amp;ndash;卡森·麦卡勒斯&amp;ndash;</description>
    </item>
    
    <item>
      <title>1031-晴</title>
      <link>https://dongr12138.github.io/post/1031/</link>
      <pubDate>Thu, 31 Oct 2019 23:30:56 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1031/</guid>
      <description>一直都是一个人，也就更擅长取悦自己。 &amp;ndash;山本文绪&amp;ndash;</description>
    </item>
    
    <item>
      <title>1030-阴晴</title>
      <link>https://dongr12138.github.io/post/1030/</link>
      <pubDate>Wed, 30 Oct 2019 23:14:26 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1030/</guid>
      <description>其实根本不需要那么着急的。不着急也没有关系。你可一定要记住啊，关乎爱情的事情，都是花费时间的。 &amp;ndash;青山七惠《新娘》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1029-阴晴</title>
      <link>https://dongr12138.github.io/post/1029/</link>
      <pubDate>Tue, 29 Oct 2019 23:14:09 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1029/</guid>
      <description>​ 搞不好我是在害怕。害怕真心爱上了谁，需要谁，可到最后对方却突如其来、毫无征兆地消失，从此无影无踪，只剩下我孤孤单单一个人。 &amp;ndash;村上春树《没有色彩的多崎作和他的巡礼之年》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1028-阴</title>
      <link>https://dongr12138.github.io/post/1028/</link>
      <pubDate>Mon, 28 Oct 2019 23:13:39 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1028/</guid>
      <description>如果你看向我，我会温柔地消融，像火山中的雪。 -米亚·科托《耶稣撒冷》-</description>
    </item>
    
    <item>
      <title>1027-无</title>
      <link>https://dongr12138.github.io/post/1027/</link>
      <pubDate>Sun, 27 Oct 2019 23:29:10 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1027/</guid>
      <description>晴秋上午，随便走走， 不一定要快乐。
木心《素履之往》</description>
    </item>
    
    <item>
      <title>1026-RestfulCRUD（2）</title>
      <link>https://dongr12138.github.io/post/1026/</link>
      <pubDate>Sat, 26 Oct 2019 22:53:00 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1026/</guid>
      <description>你是什么人便会遇上什么人； 你是什么人便会选择什么人。 总是挂在嘴上的人生，就是你的人生， 人总是很容易被自己说出的话所催眠。 我多怕你总是挂在嘴上的许多抱怨， 将会成为你所有的人生。 -竹久梦二《出帆》-
5）、CRUD-员工列表 实验要求：
1）、RestfulCRUD：CRUD满足Rest风格；
URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作
    普通CRUD（uri来区分操作） RestfulCRUD     查询 getEmp emp&amp;mdash;GET   添加 addEmp?xxx emp&amp;mdash;POST   修改 updateEmp?id=xxx&amp;amp;xxx=xx emp/{id}&amp;mdash;PUT   删除 deleteEmp?id=1 emp/{id}&amp;mdash;DELETE    2）、实验的请求架构;
   实验功能 请求URI 请求方式     查询所有员工 emps GET   查询某个员工(来到修改页面) emp/1 GET   来到添加页面 emp GET   添加员工 emp POST   来到修改页面（查出员工进行信息回显） emp/1 GET   修改员工 emp PUT   删除员工 emp/1 DELETE    3）、员工列表：</description>
    </item>
    
    <item>
      <title>1025-RestfulCRUD（1）</title>
      <link>https://dongr12138.github.io/post/1025/</link>
      <pubDate>Fri, 25 Oct 2019 21:15:29 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1025/</guid>
      <description>很奇怪，我们不屑与他人为伍，却害怕自己与众不同。 -保罗·柯艾略-
RestfulCRUD 1）、默认访问首页 //使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能 //@EnableWebMvc 不要接管SpringMVC @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers(ViewControllerRegistry registry) { // super.addViewControllers(registry); //浏览器发送 /atguigu 请求来到 success registry.addViewController(&amp;quot;/atguigu&amp;quot;).setViewName(&amp;quot;success&amp;quot;); } //所有的WebMvcConfigurerAdapter组件都会一起起作用 @Bean //将组件注册在容器 public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() { @Override public void addViewControllers(ViewControllerRegistry registry) { registry.addViewController(&amp;quot;/&amp;quot;).setViewName(&amp;quot;login&amp;quot;); registry.addViewController(&amp;quot;/index.html&amp;quot;).setViewName(&amp;quot;login&amp;quot;); } }; return adapter; } }  2）、国际化 1）、编写国际化配置文件；
2）、使用ResourceBundleMessageSource管理国际化资源文件
3）、在页面使用fmt:message取出国际化内容
步骤：
1）、编写国际化配置文件，抽取页面需要显示的国际化消息
2）、SpringBoot自动配置好了管理国际化资源文件的组件；
@ConfigurationProperties(prefix = &amp;ldquo;spring.messages&amp;rdquo;) public class MessageSourceAutoConfiguration {</description>
    </item>
    
    <item>
      <title>1024-Springboot Web开发（2）</title>
      <link>https://dongr12138.github.io/post/1024/</link>
      <pubDate>Thu, 24 Oct 2019 23:03:54 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1024/</guid>
      <description>无论头上是怎样的天空，我准备承受任何风暴。 -拜伦-
4、SpringMVC自动配置 https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications
1. Spring MVC auto-configuration Spring Boot 自动配置好了SpringMVC
以下是SpringBoot对SpringMVC的默认配置:==（WebMvcAutoConfiguration）==
 Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.
 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？）） ContentNegotiatingViewResolver：组合所有的视图解析器的； ==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==  Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars
 Static index.html support. 静态首页访问
 Custom Favicon support (see below). favicon.ico
 自动注册了 of Converter, GenericConverter, Formatter beans.
 Converter：转换器； public String hello(User user)：类型转换使用Converter Formatter 格式化器； 2017.12.17===Date；
@Bean @ConditionalOnProperty(prefix = &amp;quot;spring.mvc&amp;quot;, name = &amp;quot;date-format&amp;quot;)//在文件中配置日期格式化的规则 public Formatter&amp;lt;Date&amp;gt; dateFormatter() { return new DateFormatter(this.</description>
    </item>
    
    <item>
      <title>1023-Springboot Web开发（1）</title>
      <link>https://dongr12138.github.io/post/1023/</link>
      <pubDate>Wed, 23 Oct 2019 22:56:43 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1023/</guid>
      <description>爱欲于人，犹如执炬，逆风而行，必有烧手之患。 ——《四十二章经》
Web开发 1.简介 使用SpringBoot；
1）、创建SpringBoot应用，选中我们需要的模块；
2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来
3）、自己编写业务代码
自动配置原理？
这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx
xxxxAutoConfiguration：帮我们给容器中自动配置组件； xxxxProperties:配置类来封装配置文件的内容；  2.SpringBoot对静态资源的映射规则 @ConfigurationProperties(prefix = &amp;quot;spring.resources&amp;quot;, ignoreUnknownFields = false) public class ResourceProperties implements ResourceLoaderAware { //可以设置和静态资源有关的参数，缓存时间等  WebMvcAuotConfiguration： @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(&amp;quot;Default resource handling disabled&amp;quot;); return; } Integer cachePeriod = this.resourceProperties.getCachePeriod(); if (!registry.hasMappingForPattern(&amp;quot;/webjars/**&amp;quot;)) { customizeResourceHandlerRegistration( registry.addResourceHandler(&amp;quot;/webjars/**&amp;quot;) .addResourceLocations( &amp;quot;classpath:/META-INF/resources/webjars/&amp;quot;) .setCachePeriod(cachePeriod)); } String staticPathPattern = this.mvcProperties.getStaticPathPattern(); //静态资源文件夹映射 if (!registry.hasMappingForPattern(staticPathPattern)) { customizeResourceHandlerRegistration( registry.addResourceHandler(staticPathPattern) .addResourceLocations( this.resourceProperties.getStaticLocations()) .</description>
    </item>
    
    <item>
      <title>1022-Springboot 日志</title>
      <link>https://dongr12138.github.io/post/1022/</link>
      <pubDate>Tue, 22 Oct 2019 20:47:49 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1022/</guid>
      <description>不一起看星星，星星它亮有什么用。 &amp;mdash;Kirsty刘瑾睿 《若把你》 02：09
日志 1.日志框架 小张；开发一个大型系统；
​ 1、System.out.println(&amp;ldquo;&amp;rdquo;)；将关键数据打印在控制台；去掉？写在一个文件？
​ 2、框架来记录系统的一些运行时信息；日志框架 ； zhanglogging.jar；
​ 3、高大上的几个功能？异步模式？自动归档？xxxx？ zhanglogging-good.jar？
​ 4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；
​ 5、JDBC&amp;mdash;数据库驱动；
​ 写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；
​ 给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；
市面上的日志框架；
JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j&amp;hellip;.
   日志门面 （日志的抽象层） 日志实现     JCL（Jakarta Commons Logging） SLF4j（Simple Logging Facade for Java） jboss-logging Log4j JUL（java.util.logging） Log4j2 Logback    左边选一个门面（抽象层）、右边来选一个实现；
日志门面： SLF4J；
日志实现：Logback；
SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘
​ ==SpringBoot选用 SLF4j和logback；==
2、SLF4j使用 1、如何在系统中使用SLF4j https://www.slf4j.org 以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；
给系统里面导入slf4j的jar和 logback的实现jar
import org.slf4j.Logger; import org.</description>
    </item>
    
    <item>
      <title>1021-Springboot整合websocket实现一对一消息推送和广播消息推送</title>
      <link>https://dongr12138.github.io/post/1021/</link>
      <pubDate>Mon, 21 Oct 2019 21:35:06 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1021/</guid>
      <description>Who wrote the book on goodbye? &amp;mdash;-Lauv《The Other》 00:32
springboot基础环境 Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  代码准备 准备常量类 //webSocket相关配置 //链接地址 public static String WEBSOCKETPATHPERFIX = &amp;quot;/ws-push&amp;quot;; public static String WEBSOCKETPATH = &amp;quot;/endpointWisely&amp;quot;; //消息代理路径 public static String WEBSOCKETBROADCASTPATH = &amp;quot;/topic&amp;quot;; //前端发送给服务端请求地址 public static final String FORETOSERVERPATH = &amp;quot;/welcome&amp;quot;; //服务端生产地址,客户端订阅此地址以接收服务端生产的消息 public static final String PRODUCERPATH = &amp;quot;/topic/getResponse&amp;quot;; //点对点消息推送地址前缀 public static final String P2PPUSHBASEPATH = &amp;quot;/user&amp;quot;; //点对点消息推送地址后缀,最后的地址为/user/用户识别码/msg public static final String P2PPUSHPATH = &amp;quot;/msg&amp;quot;;  接收前端消息实体 public class WiselyMessage { private String name; public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>1020-Springboot入门</title>
      <link>https://dongr12138.github.io/post/1020/</link>
      <pubDate>Sun, 20 Oct 2019 20:15:13 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1020/</guid>
      <description>该怎么去形容你最贴切，拿什么跟你比较才算特别。 &amp;ndash;蔡健雅《红色高跟鞋》 01：22
一、Spring Boot 入门 1、Spring Boot 简介  简化Spring应用开发的一个框架；
整个Spring技术栈的一个大整合；
J2EE开发的一站式解决方案；
 2、微服务 2014，martin fowler
微服务：架构风格（服务微化）
一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；
单体应用：ALL IN ONE
微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；
详细参照微服务文档
3、环境准备 http://www.gulixueyuan.com/ 谷粒学院
环境约束
–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version &amp;ldquo;1.8.0_112&amp;rdquo;
–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9
–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS
–SpringBoot 1.5.9.RELEASE：1.5.9；
统一环境；
1、MAVEN设置； 给maven 的settings.xml配置文件的profiles标签添加
&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;jdk-1.8&amp;lt;/id&amp;gt; &amp;lt;activation&amp;gt; &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt; &amp;lt;jdk&amp;gt;1.8&amp;lt;/jdk&amp;gt; &amp;lt;/activation&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt; &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;maven.compiler.compilerVersion&amp;gt;1.8&amp;lt;/maven.compiler.compilerVersion&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt;  2、IDEA设置 整合maven进来；
4、Spring Boot HelloWorld 一个功能：
浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；
1、创建一个maven工程；（jar） 2、导入spring boot相关的依赖 &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>1019-Spring常用注解</title>
      <link>https://dongr12138.github.io/post/1019/</link>
      <pubDate>Sat, 19 Oct 2019 12:04:22 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1019/</guid>
      <description>爱恋不过是一场高烧，思念是紧跟着的好不了的咳。 &amp;ndash;李宗盛《给自己的歌》 01：02
1.注解列表
@SpringBootApplication：
包含了@ ComponentScan，@ Configuration和@EnableAutoConfiguration注解。其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序清单中。
@Configuration等于于spring的XML配置文件；使用Java代码可以检查类型安全。
@EnableAutoConfiguration自动配置。
@ComponentScan组件扫描，可自动发现和装配一些Bean。
@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。
@RestController注解是@Controller和@ResponseBody的合集，表示这是一个控制器bean，并且是将函数的返回值直接填充到HTTP响应体中，是REST风格的控制器。
@Autowired自动导入。
@PathVariable获取参数。
@JsonBackReference解决嵌套外链问题。
@RepositoryRestResourcepublic配合spring-boot-starter-data-rest使用。
2.注解详解 @SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等效于：@Configuration，@ EnableAutoConfiguration和@ComponentScan三个配置。
package com.example.myproject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } }  @ResponseBody：表示该方法的返回结果直接写入HTTP响应正文，一般在异步获取数据时使用，用于生成RESTful的api。在使用@RequestMapping后，返回值通常解析为替换路径，加上@ responsebody后返回结果不会被解析为转换路径，而是直接写入HTTP响应正文。。垂直获取json数据，加上@responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。示例代码：
@RequestMapping(“/test”) @ResponseBody public String test(){ return”ok”; }  @Controller：用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（服务层），一般这个注解在类中，通常方法需要配合注解@RequestMapping 。示例代码：
@Controller @RequestMapping(“/demoInfo”) publicclass DemoController { @Autowired private DemoInfoService demoInfoService; @RequestMapping(&amp;quot;/hello&amp;quot;) public String hello(Map&amp;lt;String,Object&amp;gt; map){ System.</description>
    </item>
    
    <item>
      <title>1018-Springboot的配置</title>
      <link>https://dongr12138.github.io/post/10-18/</link>
      <pubDate>Fri, 18 Oct 2019 22:14:27 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/10-18/</guid>
      <description>1018-Springboot的配置 两个配置文件，都是用来修改配置的 1.application.properties server.port = 8081 # //SpringBoot配置文件  2.application.yml server: port: 8081 # //SpringBoot配置文件（新型） person: lastName: hello age: 19 boss: false birth: 2019/10/18 maps: {k1: v1,k2: 12} lists: - list - zhaoliu dog: name: 小狗 age: 2 # YAML语法： # 1.基本语法 # x:(空格)y: 表示一对键值对（空格必须有）; # 以【空格】的缩进来控制层级关系；只是是左对齐的一列数据，都是同一层次的 # # server: # port: 8081 # path: /hello (注意有空格) # # 属性和值也是大小写敏感； # # 2.值的写法 # 字面量：普通的值（数字，字符串，布尔） # k: v:字面直接来写； # 字符串默认不用加上单引用或者双引导； # # &amp;quot;&amp;quot;:双引号；不会转义字符串的特殊字符；特殊字符合作为本身想表示的意思 # name： &amp;quot;zhangsan \n lisi&amp;quot; : 输出 ; zhangsan 换行 lisi # # &#39;&#39;:单引号；会转义特殊字符，特殊字符最终只是一个普通的字符数据 # name: &#39;zhangsan \n lisi&#39; : 输出 ; zhangsan \n lisi # # 对象、Map（属性和值）（键值对） # k: v: # 对象还是k: v的方式 # friends: # lastName: zhangsan # age: 20 # # 行内写法: # friend: {lastName: zhangsan,age: 18} # # 数组（List、Set）: # 用-值表示数组中的一个元素 # pets: # -cat # -dog # -pig # # 行内写法 # pets: [cat,dog,pig]  Person.</description>
    </item>
    
    <item>
      <title>1017-Springboot的Hello World</title>
      <link>https://dongr12138.github.io/post/1017/</link>
      <pubDate>Thu, 17 Oct 2019 16:40:21 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1017/</guid>
      <description>pom.xml &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;groupId&amp;gt;com.Spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;Springboot-1015&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; //导入到web依赖 &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.57&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;/project&amp;gt;  HelloWorldApplication.java package main; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; /** * rui 2019/10/15 - 23:15 */ @SpringBootApplication //Springboot主配置类 public class HelloWorldApplication { public static void main(String[] args) throws Exception{ SpringApplication.</description>
    </item>
    
    <item>
      <title>2019.10.17</title>
      <link>https://dongr12138.github.io/post/blog/</link>
      <pubDate>Thu, 17 Oct 2019 11:44:43 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/blog/</guid>
      <description>Hello 我是一个经不起批评的人，如果你批评我，我就骂你。</description>
    </item>
    
  </channel>
</rss>