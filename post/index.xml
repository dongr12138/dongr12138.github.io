<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Maybe...</title>
    <link>https://dongr12138.github.io/post/</link>
    <description>Recent content in Posts on Maybe...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Nov 2019 17:48:11 +0800</lastBuildDate>
    
	<atom:link href="https://dongr12138.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1117-04面试题</title>
      <link>https://dongr12138.github.io/post/1117/</link>
      <pubDate>Sun, 17 Nov 2019 17:48:11 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1117/</guid>
      <description>【04期】分库分表之后，id 主键如何处理？ 面试官心理分析 其实这是分库分表之后你必然要面对的一个问题，就是 id 咋生成？因为要是分成多个表之后，每个表都是从 1 开始累加，那肯定不对啊，需要一个全局唯一的 id 来支持。所以这都是你实际生产环境中必须考虑的问题。
面试题剖析 基于数据库的实现方案 数据库自增 id 这个就是说你的系统里每次得到一个 id，都是往一个库的一个表里插入一条没什么业务含义的数据，然后获取一个数据库自增的一个 id。拿到这个 id 之后再往对应的分库分表里去写入。
这个方案的好处就是方便简单，谁都会用；缺点就是单库生成自增 id，要是高并发的话，就会有瓶颈的；如果你硬是要改进一下，那么就专门开一个服务出来，这个服务每次就拿到当前 id 最大值，然后自己递增几个 id，一次性返回一批 id，然后再把当前最大 id 值修改成递增几个 id 之后的一个值；但是无论如何都是基于单个数据库。
适合的场景：你分库分表就俩原因，要不就是单库并发太高，要不就是单库数据量太大；除非是你并发不高，但是数据量太大导致的分库分表扩容，你可以用这个方案，因为可能每秒最高并发最多就几百，那么就走单独的一个库和表生成自增主键即可。
设置数据库 sequence 或者表自增字段步长 可以通过设置数据库 sequence 或者表的自增字段步长来进行水平伸缩。
比如说，现在有 8 个服务节点，每个服务节点使用一个 sequence 功能来产生 ID，每个 sequence 的起始 ID 不同，并且依次递增，步长都是 8。
适合的场景：在用户防止产生的 ID 重复时，这种方案实现起来比较简单，也能达到性能目标。但是服务节点固定，步长也固定，将来如果还要增加服务节点，就不好搞了。
UUID 好处就是本地生成，不要基于数据库来了；不好之处就是，UUID 太长了、占用空间大，作为主键性能太差了；更重要的是，UUID 不具有有序性，会导致 B+ 树索引在写的时候有过多的随机写操作（连续的 ID 可以产生部分顺序写），还有，由于在写的时候不能产生有顺序的 append 操作，而需要进行 insert 操作，将会读取整个 B+ 树节点到内存，在插入这条记录后会将整个节点写回磁盘，这种操作在记录占用空间比较大的情况下，性能下降明显。
适合的场景：如果你是要随机生成个什么文件名、编号之类的，你可以用 UUID，但是作为主键是不能用 UUID 的。
UUID.randomUUID().toString().replace(“-”, “”) -&amp;gt; sfsdf23423rr234sfdaf  获取系统当前时间 这个就是获取当前时间即可，但是问题是，并发很高的时候，比如一秒并发几千，会有重复的情况，这个是肯定不合适的。基本就不用考虑了。</description>
    </item>
    
    <item>
      <title>1115-02面试题</title>
      <link>https://dongr12138.github.io/post/1115/</link>
      <pubDate>Fri, 15 Nov 2019 18:27:56 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1115/</guid>
      <description>【02期】你能说说Spring框架中Bean的生命周期吗？ 首先简单说一下（以下为一个回答的参考模板）
1、实例化一个Bean－－也就是我们常说的new；
2、按照Spring上下文对实例化的Bean进行配置－－也就是IOC注入；
3、如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是Spring配置文件中Bean的id值
4、如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(setBeanFactory(BeanFactory)传递的是Spring工厂自身（可以用这个方式来获取其它Bean，只需在Spring配置文件中配置一个普通的Bean就可以）；
5、如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）；
6、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；
7、如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。
8、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法、；
 注：以上工作完成以后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton，这里我们不做赘述。
 9、当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用那个其实现的destroy()方法；
10、最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。
结合代码理解一下
1、Bean的定义 Spring通常通过配置文件定义Bean。如：
&amp;lt;?xml version=”1.0″ encoding=”UTF-8″?&amp;gt;&amp;lt;beans xmlns=”http://www.springframework.org/schema/beans”xmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance”xsi:schemaLocation=”http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd”&amp;gt;&amp;lt;bean id=”HelloWorld” class=”com.pqf.beans.HelloWorld”&amp;gt; &amp;lt;property name=”msg”&amp;gt; &amp;lt;value&amp;gt;HelloWorld&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;/beans&amp;gt;  这个配置文件就定义了一个标识为 HelloWorld 的Bean。在一个配置文档中可以定义多个Bean。
2、Bean的初始化 有两种方式初始化Bean。
1、在配置文档中通过指定init-method 属性来完成 在Bean的类中实现一个初始化Bean属性的方法，如init()，如：
public class HelloWorld{ public String msg=null; public Date date=null; public void init() { msg=”HelloWorld”; date=new Date(); } …… }  然后，在配置文件中设置init-mothod属性：
2、实现 org.springframwork.beans.factory.InitializingBean接口 Bean实现InitializingBean接口，并且增加 afterPropertiesSet() 方法：</description>
    </item>
    
    <item>
      <title>1114-01面试题</title>
      <link>https://dongr12138.github.io/post/1114/</link>
      <pubDate>Fri, 15 Nov 2019 18:27:51 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1114/</guid>
      <description> 【01期】Spring，SpringMVC，SpringBoot，SpringCloud有什么区别和联系？ 简单介绍 Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。Spring使你能够编写更干净、更可管理、并且更易于测试的代码。
Spring MVC是Spring的一个模块，一个web框架。通过Dispatcher Servlet, ModelAndView 和 View Resolver，开发web应用变得很容易。主要针对的是网站应用程序或者服务开发——URL路由、Session、模板引擎、静态Web资源等等。
Spring配置复杂，繁琐，所以推出了Spring boot，约定优于配置，简化了spring的配置流程。
Spring Cloud构建于Spring Boot之上，是一个关注全局的服务治理框架。
Spring VS SpringMVC：
Spring是一个一站式的轻量级的java开发框架，核心是控制反转（IOC）和面向切面（AOP），针对于开发的WEB层(springMvc)、业务层(Ioc)、持久层(jdbcTemplate)等都提供了多种配置解决方案；
SpringMVC是Spring基础之上的一个MVC框架，主要处理web开发的路径映射和视图渲染，属于Spring框架中WEB层开发的一部分；
SpringMVC VS SpringBoot：
SpringMVC属于一个企业WEB开发的MVC框架，涵盖面包括前端视图开发、文件配置、后台接口逻辑开发等，XML、config等配置相对比较繁琐复杂；
SpringBoot框架相对于SpringMVC框架来说，更专注于开发微服务后台接口，不开发前端视图；
SpringBoot和SpringCloud：
SpringBoot使用了默认大于配置的理念，集成了快速开发的Spring多个插件，同时自动过滤不需要配置的多余的插件，简化了项目的开发配置流程，一定程度上取消xml配置，是一套快速配置开发的脚手架，能快速开发单个微服务；
SpringCloud大部分的功能插件都是基于SpringBoot去实现的，SpringCloud关注于全局的微服务整合和管理，将多个SpringBoot单体微服务进行整合以及管理；SpringCloud依赖于SpringBoot开发，而SpringBoot可以独立开发；
总结下来：  Spring是核心，提供了基础功能； Spring MVC 是基于Spring的一个 MVC 框架 ； Spring Boot 是为简化Spring配置的快速开发整合包； Spring Cloud是构建在Spring Boot之上的服务治理框架。  </description>
    </item>
    
    <item>
      <title>1113-阴</title>
      <link>https://dongr12138.github.io/post/1113/</link>
      <pubDate>Wed, 13 Nov 2019 15:45:07 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1113/</guid>
      <description>人有种奇怪的虚荣心，想让别人或自己相信他向往的是真理，但其实他有求于这个世间的是爱。 --《加缪手记》--  </description>
    </item>
    
    <item>
      <title>1112-小雨</title>
      <link>https://dongr12138.github.io/post/1112/</link>
      <pubDate>Wed, 13 Nov 2019 15:38:34 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1112/</guid>
      <description>一个人知道自己为什么而活，就可以忍受任何一种生活。 &amp;ndash;尼采&amp;ndash;</description>
    </item>
    
    <item>
      <title>1111-晴</title>
      <link>https://dongr12138.github.io/post/1111/</link>
      <pubDate>Mon, 11 Nov 2019 23:38:34 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1111/</guid>
      <description>没有一个人进入你生命的时候说好了必须是暖融融一团欢喜，他们都携带着心碎、愧疚和浪费的钟点。 &amp;ndash;陈以侃《在别人的句子里》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1110</title>
      <link>https://dongr12138.github.io/post/1110/</link>
      <pubDate>Sun, 10 Nov 2019 15:14:32 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1110/</guid>
      <description>真正被爱的人在爱人眼里是绽放的丁香，航船渔火，学校铃声，山水风景，难以忘怀的谈话，朋友，孩子的周日，消逝的声音，最心爱的衣服，秋天和所有的季节。 &amp;ndash;杜鲁门·卡波特《别的声音，别的房间》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1109</title>
      <link>https://dongr12138.github.io/post/1109/</link>
      <pubDate>Sun, 10 Nov 2019 15:14:27 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1109/</guid>
      <description>在爱的领域，我们能做的一切无非是松开彼此，因为彼此占有，对我们而言太过容易无须学习。 &amp;ndash;里尔克&amp;ndash;</description>
    </item>
    
    <item>
      <title>1108</title>
      <link>https://dongr12138.github.io/post/1108/</link>
      <pubDate>Sun, 10 Nov 2019 15:14:22 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1108/</guid>
      <description>我明知生命是什么，是时时刻刻不知如何是好，所以听凭风里飘来花香泛滥的街，习惯于眺望命题模糊的塔。 &amp;ndash;木心&amp;ndash;</description>
    </item>
    
    <item>
      <title>1107-晴</title>
      <link>https://dongr12138.github.io/post/1107/</link>
      <pubDate>Thu, 07 Nov 2019 22:31:56 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1107/</guid>
      <description>Am I out of touch?</description>
    </item>
    
    <item>
      <title>1106-阴</title>
      <link>https://dongr12138.github.io/post/1106/</link>
      <pubDate>Thu, 07 Nov 2019 22:31:50 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1106/</guid>
      <description>《传奇》</description>
    </item>
    
    <item>
      <title>1105-晴</title>
      <link>https://dongr12138.github.io/post/1105/</link>
      <pubDate>Tue, 05 Nov 2019 23:25:48 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1105/</guid>
      <description>我想送给你满天星宿，而这些也是你，送给我的。 &amp;ndash;余秀华&amp;ndash;</description>
    </item>
    
    <item>
      <title>1104-晴</title>
      <link>https://dongr12138.github.io/post/1104/</link>
      <pubDate>Mon, 04 Nov 2019 22:16:38 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1104/</guid>
      <description>好</description>
    </item>
    
    <item>
      <title>1103-晴</title>
      <link>https://dongr12138.github.io/post/1103/</link>
      <pubDate>Mon, 04 Nov 2019 22:16:33 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1103/</guid>
      <description>实不相瞒 还会想你 问题不大 还能克服</description>
    </item>
    
    <item>
      <title>1102-晴</title>
      <link>https://dongr12138.github.io/post/1102/</link>
      <pubDate>Sat, 02 Nov 2019 22:12:24 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1102/</guid>
      <description>你守护世界，我守护你。 &amp;ndash;《少年的你》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1101-晴</title>
      <link>https://dongr12138.github.io/post/1101/</link>
      <pubDate>Fri, 01 Nov 2019 23:14:09 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1101/</guid>
      <description>有些人你见过之后回想起来只剩一种感觉，而不是模样。 &amp;ndash;卡森·麦卡勒斯&amp;ndash;</description>
    </item>
    
    <item>
      <title>1031-晴</title>
      <link>https://dongr12138.github.io/post/1031/</link>
      <pubDate>Thu, 31 Oct 2019 23:30:56 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1031/</guid>
      <description>一直都是一个人，也就更擅长取悦自己。 &amp;ndash;山本文绪&amp;ndash;</description>
    </item>
    
    <item>
      <title>1030-阴晴</title>
      <link>https://dongr12138.github.io/post/1030/</link>
      <pubDate>Wed, 30 Oct 2019 23:14:26 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1030/</guid>
      <description>其实根本不需要那么着急的。不着急也没有关系。你可一定要记住啊，关乎爱情的事情，都是花费时间的。 &amp;ndash;青山七惠《新娘》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1029-阴晴</title>
      <link>https://dongr12138.github.io/post/1029/</link>
      <pubDate>Tue, 29 Oct 2019 23:14:09 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1029/</guid>
      <description>​ 搞不好我是在害怕。害怕真心爱上了谁，需要谁，可到最后对方却突如其来、毫无征兆地消失，从此无影无踪，只剩下我孤孤单单一个人。 &amp;ndash;村上春树《没有色彩的多崎作和他的巡礼之年》&amp;ndash;</description>
    </item>
    
    <item>
      <title>1028-阴</title>
      <link>https://dongr12138.github.io/post/1028/</link>
      <pubDate>Mon, 28 Oct 2019 23:13:39 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1028/</guid>
      <description>如果你看向我，我会温柔地消融，像火山中的雪。 -米亚·科托《耶稣撒冷》-</description>
    </item>
    
    <item>
      <title>1027-无</title>
      <link>https://dongr12138.github.io/post/1027/</link>
      <pubDate>Sun, 27 Oct 2019 23:29:10 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1027/</guid>
      <description>晴秋上午，随便走走， 不一定要快乐。
木心《素履之往》</description>
    </item>
    
    <item>
      <title>1026-RestfulCRUD（2）</title>
      <link>https://dongr12138.github.io/post/1026/</link>
      <pubDate>Sat, 26 Oct 2019 22:53:00 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1026/</guid>
      <description>你是什么人便会遇上什么人； 你是什么人便会选择什么人。 总是挂在嘴上的人生，就是你的人生， 人总是很容易被自己说出的话所催眠。 我多怕你总是挂在嘴上的许多抱怨， 将会成为你所有的人生。 -竹久梦二《出帆》-
5）、CRUD-员工列表 实验要求：
1）、RestfulCRUD：CRUD满足Rest风格；
URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作
    普通CRUD（uri来区分操作） RestfulCRUD     查询 getEmp emp&amp;mdash;GET   添加 addEmp?xxx emp&amp;mdash;POST   修改 updateEmp?id=xxx&amp;amp;xxx=xx emp/{id}&amp;mdash;PUT   删除 deleteEmp?id=1 emp/{id}&amp;mdash;DELETE    2）、实验的请求架构;
   实验功能 请求URI 请求方式     查询所有员工 emps GET   查询某个员工(来到修改页面) emp/1 GET   来到添加页面 emp GET   添加员工 emp POST   来到修改页面（查出员工进行信息回显） emp/1 GET   修改员工 emp PUT   删除员工 emp/1 DELETE    3）、员工列表：</description>
    </item>
    
    <item>
      <title>1025-RestfulCRUD（1）</title>
      <link>https://dongr12138.github.io/post/1025/</link>
      <pubDate>Fri, 25 Oct 2019 21:15:29 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1025/</guid>
      <description>很奇怪，我们不屑与他人为伍，却害怕自己与众不同。 -保罗·柯艾略-
RestfulCRUD 1）、默认访问首页 //使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能 //@EnableWebMvc 不要接管SpringMVC @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers(ViewControllerRegistry registry) { // super.addViewControllers(registry); //浏览器发送 /atguigu 请求来到 success registry.addViewController(&amp;quot;/atguigu&amp;quot;).setViewName(&amp;quot;success&amp;quot;); } //所有的WebMvcConfigurerAdapter组件都会一起起作用 @Bean //将组件注册在容器 public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() { @Override public void addViewControllers(ViewControllerRegistry registry) { registry.addViewController(&amp;quot;/&amp;quot;).setViewName(&amp;quot;login&amp;quot;); registry.addViewController(&amp;quot;/index.html&amp;quot;).setViewName(&amp;quot;login&amp;quot;); } }; return adapter; } }  2）、国际化 1）、编写国际化配置文件；
2）、使用ResourceBundleMessageSource管理国际化资源文件
3）、在页面使用fmt:message取出国际化内容
步骤：
1）、编写国际化配置文件，抽取页面需要显示的国际化消息
2）、SpringBoot自动配置好了管理国际化资源文件的组件；
@ConfigurationProperties(prefix = &amp;ldquo;spring.messages&amp;rdquo;) public class MessageSourceAutoConfiguration {</description>
    </item>
    
    <item>
      <title>1024-Springboot Web开发（2）</title>
      <link>https://dongr12138.github.io/post/1024/</link>
      <pubDate>Thu, 24 Oct 2019 23:03:54 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1024/</guid>
      <description>无论头上是怎样的天空，我准备承受任何风暴。 -拜伦-
4、SpringMVC自动配置 https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications
1. Spring MVC auto-configuration Spring Boot 自动配置好了SpringMVC
以下是SpringBoot对SpringMVC的默认配置:==（WebMvcAutoConfiguration）==
 Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.
 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？）） ContentNegotiatingViewResolver：组合所有的视图解析器的； ==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==  Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars
 Static index.html support. 静态首页访问
 Custom Favicon support (see below). favicon.ico
 自动注册了 of Converter, GenericConverter, Formatter beans.
 Converter：转换器； public String hello(User user)：类型转换使用Converter Formatter 格式化器； 2017.12.17===Date；
@Bean @ConditionalOnProperty(prefix = &amp;quot;spring.mvc&amp;quot;, name = &amp;quot;date-format&amp;quot;)//在文件中配置日期格式化的规则 public Formatter&amp;lt;Date&amp;gt; dateFormatter() { return new DateFormatter(this.</description>
    </item>
    
    <item>
      <title>1023-Springboot Web开发（1）</title>
      <link>https://dongr12138.github.io/post/1023/</link>
      <pubDate>Wed, 23 Oct 2019 22:56:43 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1023/</guid>
      <description>爱欲于人，犹如执炬，逆风而行，必有烧手之患。 ——《四十二章经》
Web开发 1.简介 使用SpringBoot；
1）、创建SpringBoot应用，选中我们需要的模块；
2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来
3）、自己编写业务代码
自动配置原理？
这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx
xxxxAutoConfiguration：帮我们给容器中自动配置组件； xxxxProperties:配置类来封装配置文件的内容；  2.SpringBoot对静态资源的映射规则 @ConfigurationProperties(prefix = &amp;quot;spring.resources&amp;quot;, ignoreUnknownFields = false) public class ResourceProperties implements ResourceLoaderAware { //可以设置和静态资源有关的参数，缓存时间等  WebMvcAuotConfiguration： @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(&amp;quot;Default resource handling disabled&amp;quot;); return; } Integer cachePeriod = this.resourceProperties.getCachePeriod(); if (!registry.hasMappingForPattern(&amp;quot;/webjars/**&amp;quot;)) { customizeResourceHandlerRegistration( registry.addResourceHandler(&amp;quot;/webjars/**&amp;quot;) .addResourceLocations( &amp;quot;classpath:/META-INF/resources/webjars/&amp;quot;) .setCachePeriod(cachePeriod)); } String staticPathPattern = this.mvcProperties.getStaticPathPattern(); //静态资源文件夹映射 if (!registry.hasMappingForPattern(staticPathPattern)) { customizeResourceHandlerRegistration( registry.addResourceHandler(staticPathPattern) .addResourceLocations( this.resourceProperties.getStaticLocations()) .</description>
    </item>
    
    <item>
      <title>1022-Springboot 日志</title>
      <link>https://dongr12138.github.io/post/1022/</link>
      <pubDate>Tue, 22 Oct 2019 20:47:49 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1022/</guid>
      <description>不一起看星星，星星它亮有什么用。 &amp;mdash;Kirsty刘瑾睿 《若把你》 02：09
日志 1.日志框架 小张；开发一个大型系统；
​ 1、System.out.println(&amp;ldquo;&amp;rdquo;)；将关键数据打印在控制台；去掉？写在一个文件？
​ 2、框架来记录系统的一些运行时信息；日志框架 ； zhanglogging.jar；
​ 3、高大上的几个功能？异步模式？自动归档？xxxx？ zhanglogging-good.jar？
​ 4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；
​ 5、JDBC&amp;mdash;数据库驱动；
​ 写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；
​ 给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；
市面上的日志框架；
JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j&amp;hellip;.
   日志门面 （日志的抽象层） 日志实现     JCL（Jakarta Commons Logging） SLF4j（Simple Logging Facade for Java） jboss-logging Log4j JUL（java.util.logging） Log4j2 Logback    左边选一个门面（抽象层）、右边来选一个实现；
日志门面： SLF4J；
日志实现：Logback；
SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘
​ ==SpringBoot选用 SLF4j和logback；==
2、SLF4j使用 1、如何在系统中使用SLF4j https://www.slf4j.org 以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；
给系统里面导入slf4j的jar和 logback的实现jar
import org.slf4j.Logger; import org.</description>
    </item>
    
    <item>
      <title>1021-Springboot整合websocket实现一对一消息推送和广播消息推送</title>
      <link>https://dongr12138.github.io/post/1021/</link>
      <pubDate>Mon, 21 Oct 2019 21:35:06 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1021/</guid>
      <description>Who wrote the book on goodbye? &amp;mdash;-Lauv《The Other》 00:32
springboot基础环境 Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  代码准备 准备常量类 //webSocket相关配置 //链接地址 public static String WEBSOCKETPATHPERFIX = &amp;quot;/ws-push&amp;quot;; public static String WEBSOCKETPATH = &amp;quot;/endpointWisely&amp;quot;; //消息代理路径 public static String WEBSOCKETBROADCASTPATH = &amp;quot;/topic&amp;quot;; //前端发送给服务端请求地址 public static final String FORETOSERVERPATH = &amp;quot;/welcome&amp;quot;; //服务端生产地址,客户端订阅此地址以接收服务端生产的消息 public static final String PRODUCERPATH = &amp;quot;/topic/getResponse&amp;quot;; //点对点消息推送地址前缀 public static final String P2PPUSHBASEPATH = &amp;quot;/user&amp;quot;; //点对点消息推送地址后缀,最后的地址为/user/用户识别码/msg public static final String P2PPUSHPATH = &amp;quot;/msg&amp;quot;;  接收前端消息实体 public class WiselyMessage { private String name; public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>1020-Springboot入门</title>
      <link>https://dongr12138.github.io/post/1020/</link>
      <pubDate>Sun, 20 Oct 2019 20:15:13 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1020/</guid>
      <description>该怎么去形容你最贴切，拿什么跟你比较才算特别。 &amp;ndash;蔡健雅《红色高跟鞋》 01：22
一、Spring Boot 入门 1、Spring Boot 简介  简化Spring应用开发的一个框架；
整个Spring技术栈的一个大整合；
J2EE开发的一站式解决方案；
 2、微服务 2014，martin fowler
微服务：架构风格（服务微化）
一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；
单体应用：ALL IN ONE
微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；
详细参照微服务文档
3、环境准备 http://www.gulixueyuan.com/ 谷粒学院
环境约束
–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version &amp;ldquo;1.8.0_112&amp;rdquo;
–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9
–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS
–SpringBoot 1.5.9.RELEASE：1.5.9；
统一环境；
1、MAVEN设置； 给maven 的settings.xml配置文件的profiles标签添加
&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;jdk-1.8&amp;lt;/id&amp;gt; &amp;lt;activation&amp;gt; &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt; &amp;lt;jdk&amp;gt;1.8&amp;lt;/jdk&amp;gt; &amp;lt;/activation&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt; &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;maven.compiler.compilerVersion&amp;gt;1.8&amp;lt;/maven.compiler.compilerVersion&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt;  2、IDEA设置 整合maven进来；
4、Spring Boot HelloWorld 一个功能：
浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；
1、创建一个maven工程；（jar） 2、导入spring boot相关的依赖 &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>1019-Spring常用注解</title>
      <link>https://dongr12138.github.io/post/1019/</link>
      <pubDate>Sat, 19 Oct 2019 12:04:22 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1019/</guid>
      <description>爱恋不过是一场高烧，思念是紧跟着的好不了的咳。 &amp;ndash;李宗盛《给自己的歌》 01：02
1.注解列表
@SpringBootApplication：
包含了@ ComponentScan，@ Configuration和@EnableAutoConfiguration注解。其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序清单中。
@Configuration等于于spring的XML配置文件；使用Java代码可以检查类型安全。
@EnableAutoConfiguration自动配置。
@ComponentScan组件扫描，可自动发现和装配一些Bean。
@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。
@RestController注解是@Controller和@ResponseBody的合集，表示这是一个控制器bean，并且是将函数的返回值直接填充到HTTP响应体中，是REST风格的控制器。
@Autowired自动导入。
@PathVariable获取参数。
@JsonBackReference解决嵌套外链问题。
@RepositoryRestResourcepublic配合spring-boot-starter-data-rest使用。
2.注解详解 @SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等效于：@Configuration，@ EnableAutoConfiguration和@ComponentScan三个配置。
package com.example.myproject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } }  @ResponseBody：表示该方法的返回结果直接写入HTTP响应正文，一般在异步获取数据时使用，用于生成RESTful的api。在使用@RequestMapping后，返回值通常解析为替换路径，加上@ responsebody后返回结果不会被解析为转换路径，而是直接写入HTTP响应正文。。垂直获取json数据，加上@responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。示例代码：
@RequestMapping(“/test”) @ResponseBody public String test(){ return”ok”; }  @Controller：用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（服务层），一般这个注解在类中，通常方法需要配合注解@RequestMapping 。示例代码：
@Controller @RequestMapping(“/demoInfo”) publicclass DemoController { @Autowired private DemoInfoService demoInfoService; @RequestMapping(&amp;quot;/hello&amp;quot;) public String hello(Map&amp;lt;String,Object&amp;gt; map){ System.</description>
    </item>
    
    <item>
      <title>1018-Springboot的配置</title>
      <link>https://dongr12138.github.io/post/10-18/</link>
      <pubDate>Fri, 18 Oct 2019 22:14:27 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/10-18/</guid>
      <description>1018-Springboot的配置 两个配置文件，都是用来修改配置的 1.application.properties server.port = 8081 # //SpringBoot配置文件  2.application.yml server: port: 8081 # //SpringBoot配置文件（新型） person: lastName: hello age: 19 boss: false birth: 2019/10/18 maps: {k1: v1,k2: 12} lists: - list - zhaoliu dog: name: 小狗 age: 2 # YAML语法： # 1.基本语法 # x:(空格)y: 表示一对键值对（空格必须有）; # 以【空格】的缩进来控制层级关系；只是是左对齐的一列数据，都是同一层次的 # # server: # port: 8081 # path: /hello (注意有空格) # # 属性和值也是大小写敏感； # # 2.值的写法 # 字面量：普通的值（数字，字符串，布尔） # k: v:字面直接来写； # 字符串默认不用加上单引用或者双引导； # # &amp;quot;&amp;quot;:双引号；不会转义字符串的特殊字符；特殊字符合作为本身想表示的意思 # name： &amp;quot;zhangsan \n lisi&amp;quot; : 输出 ; zhangsan 换行 lisi # # &#39;&#39;:单引号；会转义特殊字符，特殊字符最终只是一个普通的字符数据 # name: &#39;zhangsan \n lisi&#39; : 输出 ; zhangsan \n lisi # # 对象、Map（属性和值）（键值对） # k: v: # 对象还是k: v的方式 # friends: # lastName: zhangsan # age: 20 # # 行内写法: # friend: {lastName: zhangsan,age: 18} # # 数组（List、Set）: # 用-值表示数组中的一个元素 # pets: # -cat # -dog # -pig # # 行内写法 # pets: [cat,dog,pig]  Person.</description>
    </item>
    
    <item>
      <title>1017-Springboot的Hello World</title>
      <link>https://dongr12138.github.io/post/1017/</link>
      <pubDate>Thu, 17 Oct 2019 16:40:21 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/1017/</guid>
      <description>pom.xml &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;groupId&amp;gt;com.Spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;Springboot-1015&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; //导入到web依赖 &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.57&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;/project&amp;gt;  HelloWorldApplication.java package main; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; /** * rui 2019/10/15 - 23:15 */ @SpringBootApplication //Springboot主配置类 public class HelloWorldApplication { public static void main(String[] args) throws Exception{ SpringApplication.</description>
    </item>
    
    <item>
      <title>2019.10.17</title>
      <link>https://dongr12138.github.io/post/blog/</link>
      <pubDate>Thu, 17 Oct 2019 11:44:43 +0800</pubDate>
      
      <guid>https://dongr12138.github.io/post/blog/</guid>
      <description>Hello 我是一个经不起批评的人，如果你批评我，我就骂你。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dongr12138.github.io/post/1116/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongr12138.github.io/post/1116/</guid>
      <description>【03期】如何决定使用 HashMap 还是 TreeMap？ 介绍 TreeMap&amp;lt;K,V&amp;gt;的Key值是要求实现java.lang.Comparable，所以迭代的时候TreeMap默认是按照Key值升序排序的；TreeMap的实现是基于红黑树结构。适用于按自然顺序或自定义顺序遍历键（key）。
HashMap&amp;lt;K,V&amp;gt;的Key值实现散列hashCode()，分布是散列的、均匀的，不支持排序；数据结构主要是桶(数组)，链表或红黑树。适用于在Map中插入、删除和定位元素。
结论 如果你需要得到一个有序的结果时就应该使用TreeMap（因为HashMap中元素的排列顺序是不固定的）。除此之外，由于HashMap有更好的性能，所以大多不需要排序的时候我们会使用HashMap。
拓展 1、HashMap 和 TreeMap 的实现
HashMap：基于哈希表实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。
 HashMap(): 构建一个空的哈希映像 HashMap(Map m): 构建一个哈希映像，并且添加映像m的所有映射 HashMap(int initialCapacity): 构建一个拥有特定容量的空的哈希映像 HashMap(int initialCapacity, float loadFactor): 构建一个拥有特定容量和加载因子的空的哈希映像  TreeMap：基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。
 TreeMap()：构建一个空的映像树 TreeMap(Map m): 构建一个映像树，并且添加映像m中所有元素 TreeMap(Comparator c): 构建一个映像树，并且使用特定的比较器对关键字进行排序 TreeMap(SortedMap s): 构建一个映像树，添加映像树s中所有映射，并且使用与有序映像s相同的比较器排序  2、HashMap 和 TreeMap 都是非线程安全
HashMap继承AbstractMap抽象类，TreeMap继承自SortedMap接口。
AbstractMap抽象类：覆盖了equals()和hashCode()方法以确保两个相等映射返回相同的哈希码。如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等。映射的哈希码是映射元素哈希码的总和，其中每个元素是Map.Entry接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。
SortedMap接口：它用来保持键的有序顺序。SortedMap接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理SortedMap和处理SortedSet一样。添加到SortedMap实现类的元素必须实现Comparable接口，否则您必须给它的构造函数提供一个Comparator接口的实现。TreeMap类是它的唯一一个实现。
3、TreeMap中默认是按照升序进行排序的，如何让他降序
通过自定义的比较器来实现
定义一个比较器类，实现Comparator接口，重写compare方法，有两个参数，这两个参数通过调用compareTo进行比较，而compareTo默认规则是：
  如果参数字符串等于此字符串，则返回 0 值； 如果此字符串小于字符串参数，则返回一个小于 0 的值； 如果此字符串大于字符串参数，则返回一个大于 0 的值。   自定义比较器时，在返回时多添加了个负号，就将比较的结果以相反的形式返回，代码如下：
static class MyComparator implements Comparator{ @Override public int compare(Object o1, Object o2) { // TODO Auto-generated method stub String param1 = (String)o1; String param2 = (String)o2; return -param1.</description>
    </item>
    
  </channel>
</rss>